"""

"""
#!/usr/bin/python3
# IMPORTS
## Standard Library Imports
import os
import sys
from timeit import default_timer as timer

## Local Imports
import ensemblify as ey

# FUNCTIONS
def ensemblify_pipeline(
    parameters: str,
    analysis: bool = True,
    exp_saxs_data: str | None = None):
    """Function that uses all the functionalities of the ensemblify Python library. Consists of
    4 main steps: Ensemble Generation, Trajectory Creation, Trajectory Analysis and Ensemble
    Reweighting.

    Args:
        parameters:
            path to a parameters .yaml file (generated by .html form or manually setup by user).
        analysis:
            whether to perform the analysis of the ensemble. Defaults to True.
        exp_saxs_data:
            path to a .dat file with experimental SAXS data of the protein being ensembled.
            If given, reweighting of the generated ensemble will be performed based on this data.
            Defaults to None.
    """

    # Retrieve information from input parameters
    JOB_NAME = parameters['job_name']
    ENSEMBLE_SIZE = parameters['size']
    OUTPUT_DIR = parameters['output_path']

    # Setup output folder identified by job_name
    OUTPUT_DIR_JOB = os.path.join(OUTPUT_DIR,JOB_NAME)

    assert not os.path.isdir(OUTPUT_DIR_JOB), ('Output directory with the same name found. Are you '
                                               'sure you are not overwriting existing results?')
    os.mkdir(OUTPUT_DIR_JOB)

    # Setup necessary directories for the pipeline
    ## Trajectory creation
    TRAJECTORY_DIR = os.path.join(OUTPUT_DIR_JOB,'trajectory')
    ## Trajectory Analysis
    ANALYSIS_DIR = os.path.join(OUTPUT_DIR_JOB,'analysis')
    ## Reweighting
    REWEIGHTING_DIR = os.path.join(OUTPUT_DIR_JOB,'reweighting')

    # Generate ensemble
    start = timer()
    valid_pdbs_dir = ey.generate_ensemble(parameters_path=parameters)
    end = timer()
    print(f' ----------------- Ensemble generation took {round(end-start,3)} s -----------------' )

    # Create trajectory
    start = timer()
    trajectory_path, topology_path = ey.ensemble2traj(job_name=JOB_NAME,
                                                      ensemble_dir=valid_pdbs_dir,
                                                      trajectory_dir=TRAJECTORY_DIR,
                                                      trajectory_size=ENSEMBLE_SIZE)
    end = timer()
    print(f' ----------------- Trajectory Creation took: {round(end-start,3)} s -----------------' )

    # Analyze trajectory
    if analysis:
        start = timer()
        structural_metrics_data = ey.analyze_trajectory(trajectory_ids=[JOB_NAME],
                                                        trajectories=[trajectory_path],
                                                        topologies=[topology_path],
                                                        output_directory=ANALYSIS_DIR)
        end = timer()
        print((f' ----------------- Trajectory Analysis took: {round(end-start,3)} s '
                '-----------------'))

    # Reweigh ensemble with exp data
    if exp_saxs_data is not None:
        start = timer()
        ey.reweigh_ensemble(trajectory_id=JOB_NAME,
                            trajectory=trajectory_path,
                            topology=topology_path,
                            exp_saxs_data=exp_saxs_data,
                            output_dir=REWEIGHTING_DIR,
                            calculated_metrics_data=structural_metrics_data)
        end = timer()
        print((f' ----------------- Ensemble Reweighting took: {round(end-start,3)} s '
                '-----------------'))

    print("Ensemblify's pipeline has finished, good luck in your analysis!")

def main():
    ey.update_config({'FASPR_PATH': '/home/tiagogomes/software/FASPR-master/FASPR',
                      'PULCHRA_PATH': '/home/tiagogomes/software/pulchra-master/pulchra_CHANGED',
                      'PEPSI_SAXS_PATH': '/home/tiagogomes/software/Pepsi-SAXS'})

    parameters = sys.argv[1]
    analysis = sys.argv[2]
    exp_saxs_data = sys.argv[3]

    # run the pipeline
    ensemblify_pipeline(parameters=parameters,
                        analysis=analysis,
                        exp_saxs_data=exp_saxs_data)

if __name__ == '__main__':
    main()

# TODO Add argparse layer to main function so we can run this from command line.
# pipeline -p params.yaml -a True -data tir.dat

