"""All of Ensemblify's functionalities integrated into one function call."""

# IMPORTS
## Standard Library Imports
import os
from timeit import default_timer as timer

## Local Imports
from ensemblify.analysis import analyze_trajectory
from ensemblify.conversion import ensemble2traj
from ensemblify.generation import generate_ensemble
from ensemblify.reweighting import reweight_ensemble

# FUNCTIONS
def ensemblify_pipeline(
    parameters: str,
    analysis: bool = True,
    exp_data: str | None = None):
    """Function that uses all the functionalities of the ensemblify Python library. Consists of
    4 main steps: Ensemble Generation, Trajectory Creation, Trajectory Analysis and Ensemble
    Reweighting.

    Args:
        parameters:
            path to a parameters .yaml file (generated by .html form or manually setup by user).
        analysis:
            whether to perform the analysis of the ensemble. Defaults to True.
        exp_saxs_data:
            path to a .dat file with experimental SAXS data of the protein being ensemblified.
            If given, reweighting of the generated ensemble will be performed based on this data.
            Defaults to None.
    """

    # Retrieve information from input parameters
    JOB_NAME = parameters['job_name']
    ENSEMBLE_SIZE = parameters['size']
    OUTPUT_DIR = parameters['output_path']

    # Setup output folder identified by job_name
    OUTPUT_DIR_JOB = os.path.join(OUTPUT_DIR,JOB_NAME)

    assert not os.path.isdir(OUTPUT_DIR_JOB), ('Output directory with the same name found. Are you '
                                               'sure you are not overwriting existing results?')
    os.mkdir(OUTPUT_DIR_JOB)

    # Setup necessary directories for the pipeline
    ## Trajectory creation
    TRAJECTORY_DIR = os.path.join(OUTPUT_DIR_JOB,'trajectory')
    ## Trajectory Analysis
    ANALYSIS_DIR = os.path.join(OUTPUT_DIR_JOB,'analysis')
    ## Reweighting
    REWEIGHTING_DIR = os.path.join(OUTPUT_DIR_JOB,'reweighting')

    # Generate ensemble
    start = timer()
    valid_pdbs_dir = generate_ensemble(parameters_path=parameters)
    end = timer()
    print(f' ----------------- Ensemble generation took {round(end-start,3)} s -----------------' )

    # Create trajectory
    start = timer()
    trajectory_path, topology_path = ensemble2traj(job_name=JOB_NAME,
                                                   ensemble_dir=valid_pdbs_dir,
                                                   trajectory_dir=TRAJECTORY_DIR,
                                                   trajectory_size=ENSEMBLE_SIZE)
    end = timer()
    print(f' ----------------- Trajectory Creation took: {round(end-start,3)} s -----------------' )

    # Analyze trajectory
    if analysis:
        start = timer()
        structural_metrics_data = analyze_trajectory(trajectory_ids=JOB_NAME,
                                                     trajectories=trajectory_path,
                                                     topologies=topology_path,
                                                     output_directory=ANALYSIS_DIR)
        end = timer()
        print((f' ----------------- Trajectory Analysis took: {round(end-start,3)} s '
                '-----------------'))

        # Reweigh ensemble with exp data
        if exp_data is not None:
            start = timer()
            reweight_ensemble(trajectory_id=JOB_NAME,
                              trajectory=trajectory_path,
                              topology=topology_path,
                              exp_saxs_data=exp_data,
                              output_dir=REWEIGHTING_DIR,
                              calculated_metrics_data=structural_metrics_data)
            end = timer()
            print((f' ----------------- Ensemble Reweighting took: {round(end-start,3)} s '
                    '-----------------'))

    print("Ensemblify's pipeline has finished, good luck in your analysis!")
